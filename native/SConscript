# Copyright 2020 Kaloian Manassiev
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import os

Import('env')
native_env = env.Clone()
native_env.Append(CPPPATH=[native_env.Dir('.').abspath])
native_env.Append(CXXFLAGS=['-std=c++14'])
native_env.Append(CPPDEFINES=['BOOST_FILESYSTEM_NO_DEPRECATED'])


def MakeCommonNativeEnv(arch_name):
    arch = native_env[arch_name]

    # Boost configuration
    boost_library_names = [
        'boost_atomic',
        'boost_chrono',
        'boost_log_setup',
        'boost_log',
        'boost_filesystem',
        'boost_program_options',
        'boost_regex',
        'boost_thread',
    ]

    boost_install_directory = native_env.Dir(arch['arch']).abspath

    boost = native_env.Command(
        list(
            map(
                lambda lib: native_env.File(
                    os.path.join(boost_install_directory, 'boost', 'lib', 'lib' + lib + '.a')),
                boost_library_names)),
        native_env.File('make_boost_for_platform.sh'),
        [
            '{script_path} {install_directory} {boost_version} {compiler_prefix} > boost_for_{arch}_build.log'
            .format(
                script_path=str(native_env.File('make_boost_for_platform.sh')),
                install_directory=boost_install_directory,
                boost_version=ARGUMENTS.get('BOOST_VERSION', '1.74.0'),
                compiler_prefix=arch['prefix'],
                arch=arch['arch'],
            ),
        ],
    )

    # Common environment configuration
    env = native_env.Clone()
    env.Append(CPPPATH=[os.path.join(boost_install_directory, 'boost', 'include')])
    env.Append(LIBPATH=[
        os.path.join(boost_install_directory, 'boost', 'lib'),
        native_env.Dir(os.path.join(arch['arch'], 'common'))
    ])
    env.Append(LIBS=['common', boost_library_names, 'pthread'])
    for (tool, name) in [
        ('CXX', 'g++'),
    ]:
        env[tool] = arch['prefix'] + name

    # Build the common library
    common = SConscript('common/SConscript', variant_dir=os.path.join(arch['arch'], 'common'),
                        exports='env', duplicate=0)
    return env


# Build the Client
env = MakeCommonNativeEnv('CLIENT_ARCH')
SConscript('client/SConscript', exports='env', duplicate=0)

# Build the Server
if native_env['SERVER_ARCH'] != native_env['CLIENT_ARCH']:
    env = MakeCommonNativeEnv('SERVER_ARCH')
SConscript('server/SConscript', exports='env', duplicate=0)
