# Copyright 2020 Kaloian Manassiev
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import os

Import('env')

native_env = env.Clone()
native_env.Append(CPPPATH=[native_env.Dir('.').srcnode()])
native_env.Append(CXXFLAGS=['-std=c++17'])
native_env.Append(CPPDEFINES=['BOOST_FILESYSTEM_NO_DEPRECATED'])

architectures = native_env['ARCHITECTURES']

client_architecture = native_env['CLIENT_ARCH']
server_architecture = native_env['SERVER_ARCH']
tests_architecture = 'pc'

print(
    f'Native architectures: Client {client_architecture}, Server {server_architecture}, Tests {tests_architecture}'
)


# Builds all the Boost libraries used by any of the targets
class Boost:
    # The `arch_name` argument is one of the keys in the `architectures` map
    def __init__(self, arch_name):
        arch = architectures[arch_name]

        boost_library_names = [
            'boost_atomic',
            'boost_chrono',
            'boost_log_setup',
            'boost_log',
            'boost_filesystem',
            'boost_program_options',
            'boost_regex',
            'boost_thread',
        ]

        boost_test_library_names = [
            'boost_unit_test_framework',
            'boost_test_exec_monitor',
        ]

        boost_install_directory = native_env.Dir(arch['arch']).abspath

        self.include_path = native_env.Dir(os.path.join(boost_install_directory, 'boost',
                                                        'include'))
        self.lib_path = native_env.Dir(os.path.join(boost_install_directory, 'boost', 'lib'))
        self.libs = native_env.Command(
            list(
                map(
                    lambda lib: native_env.File(
                        os.path.join(boost_install_directory, 'boost', 'lib', 'lib' + lib + '.a')),
                    boost_library_names)),
            native_env.File('make_boost_for_platform.sh'),
            [
                '{script_path} {install_directory} {boost_version} {compiler} > boost_for_{arch}_build.log'
                .format(
                    script_path=str(native_env.File('make_boost_for_platform.sh')),
                    install_directory=boost_install_directory,
                    boost_version=ARGUMENTS.get('BOOST_VERSION', '1.79.0'),
                    compiler=arch['prefix'] + 'g++' + arch['suffix'],
                    arch=arch['arch'],
                ),
            ],
        )
        self.test_libs = list(
            map(
                lambda lib: native_env.File(
                    os.path.join(boost_install_directory, 'boost', 'lib', 'lib' + lib + '.a')),
                boost_test_library_names))

    # Map from `arch_name` to `Boost` instances
    instances = {}

    def get(arch_name):
        if arch_name not in Boost.instances:
            Boost.instances[arch_name] = Boost(arch_name)
        return Boost.instances[arch_name]


# Constructs native environment for the specified architecture
class CommonNativeEnvironment:
    # The `arch_name` argument is one of the keys in the `architectures` map
    def makeCommonNativeEnv(arch_name):
        arch = architectures[arch_name]
        boost = Boost.get(arch_name)

        env = native_env.Clone()

        env.Append(CPPPATH=[
            boost.include_path,
        ])
        env.Append(LIBPATH=[
            boost.lib_path,
        ])
        env.Append(LIBS=[
            'pthread',
        ])

        for (tool, name) in [
            ('CC', 'gcc'),
            ('CXX', 'g++'),
        ]:
            env[tool] = arch['prefix'] + name + arch['suffix']

        # Build the Common library
        common = SConscript('common/SConscript',
                            variant_dir=env.Dir(os.path.join(arch['arch'],
                                                             'common')), exports='env', duplicate=0)
        env.Append(LIBS=[common, boost.libs])

        return env

    # Map from `arch_name` to `Environment` instances
    environments = {}

    def get(arch_name):
        if arch_name not in CommonNativeEnvironment.environments:
            CommonNativeEnvironment.environments[
                arch_name] = CommonNativeEnvironment.makeCommonNativeEnv(arch_name)
        return CommonNativeEnvironment.environments[arch_name]


# Build the Client
env = CommonNativeEnvironment.get(client_architecture)
SConscript('client/SConscript', exports='env', duplicate=0)

# Build the Server
env = CommonNativeEnvironment.get(server_architecture)
SConscript('server/SConscript', exports='env', duplicate=0)

# Build the Tests
boost_for_tests = Boost.get(tests_architecture)
test_env = CommonNativeEnvironment.get(tests_architecture)
test_env.Append(LIBS=[boost_for_tests.test_libs])
SConscript('test/SConscript', exports='test_env', duplicate=0)
